// 
// MME 4487 Pickup and Sorting Mechanism
// 
//  Language: Arduino (C++)
//  Target:   ESP32
//  Author:   Wesley Guo
//  Date:     2023 11 19
//

// #define OUTPUT_ON                                    // uncomment to turn on output debugging information
#define PRINT_COLOUR

#include <Arduino.h>
#include <Wire.h>
#include <SPI.h>
#include "Adafruit_TCS34725.h"

// Function declarations
void doHeartbeat();
long degreesToDutyCycle(int deg);

// Constants
const int ci_HeartbeatLED = 2;                       // GPIO pin of built-in LED for heartbeat
const int ci_HeartbeatInterval = 500;                // heartbeat blink interval, in milliseconds
const int ci_ServoPin = 15;                          // GPIO pin for servo motor ARM
const int ci_Servo1Pin = 16;
const int ci_ServoArm = 5;                       // PWM channel used for the RC servo motor
const int ci_ServoGrip = 4;                       // PWM channel used for the RC servo motor
const int cTCSLED = 23;                               // GPIO pin for LED on TCS34725

// Variables
boolean b_Heartbeat = true;                          // state of heartbeat LED
unsigned long ul_LastHeartbeat = 0;                  // time of last heartbeat state change
unsigned long ul_CurMillis = 0;                      // current time, in milliseconds
unsigned long ul_PrevMillis = 0;                     // start time for delay cycle, in milliseconds
Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_2_4MS, TCS34725_GAIN_4X);
bool tcsFlag = 0;                                     // TCS34725 flag: 1 = connected; 0 = not found

void setup() {

    Serial.begin(115200);                            // Standard baud rate for ESP32 serial monitor

  pinMode(ci_HeartbeatLED, OUTPUT);                  // configure built-in LED for heartbeat
  pinMode(ci_PotPin, INPUT);                         // configure potentiometer pin for input
  ledcAttachPin(ci_ServoPin, ci_ServoArm);       // assign servo pin to servo channel
  ledcSetup(ci_ServoArm, 50, 16);                // setup for channel for 50 Hz, 16-bit resolution
  ledcAttachPin(ci_Servo1Pin, ci_ServoGrip);       // assign servo pin to servo channel
  ledcSetup(ci_ServoGrip, 50, 16);                // setup for channel for 50 Hz, 16-bit resolution
  pinMode(cTCSLED, OUTPUT);                           // configure GPIO for control of LED on TCS34725

  // Connect to TCS34725 colour sensor
  if (tcs.begin()) {
    Serial.printf("Found TCS34725 colour sensor\n");
    tcsFlag = true;
    digitalWrite(cTCSLED, 1);                         // turn on onboard LED 
  } 
  else {
    Serial.printf("No TCS34725 found ... check your connections\n");
    tcsFlag = false;
  }
}

void loop() {

  uint16_t r, g, b, c;                                // RGBC values from TCS34725
  
  if (tcsFlag) {                                      // if colour sensor initialized
    tcs.getRawData(&r, &g, &b, &c);                   // get raw RGBC values
  #ifdef PRINT_COLOUR            
      Serial.printf("R: %d, G: %d, B: %d, C %d\n", r, g, b, c);
  #endif
  }

  if (r > 1 || g > 1 || b > 1){
    if (r < 10, g < 10, b < 10){
      ledcWrite(ci_ServoGrip, degreesToDutyCycle(135));  // set the desired servo position
      delay(50);
      for (int i=180; i >= 50; i--){
        ledcWrite(ci_ServoArm, degreesToDutyCycle(i));
        delay(10);
      }
      ledcWrite(ci_ServoGrip, degreesToDutyCycle(75));  // set the desired servo position
      delay(50);
      for (int i=50; i <= 180; i++){
        ledcWrite(ci_ServoArm, degreesToDutyCycle(i));
        delay(10);
      }
    }
    else {
      for (int i=180; i >= 140; i--){
        ledcWrite(ci_ServoArm, degreesToDutyCycle(i));
        delay(10);
      }
      for (int i=140; i <= 180; i++){
        ledcWrite(ci_ServoArm, degreesToDutyCycle(i));
        delay(10);
      }
    }
  }
  else {
    ledcWrite(ci_ServoArm, degreesToDutyCycle(180));
    ledcWrite(ci_ServoGrip, degreesToDutyCycle(75));
  }
  doHeartbeat();                                     // update heartbeat LED
}

// blink heartbeat LED
void doHeartbeat() {
  ul_CurMillis = millis();                           // get the current time in milliseconds
  // check to see if elapsed time matches the heartbeat interval
  if ((ul_CurMillis - ul_LastHeartbeat) > ci_HeartbeatInterval) {
    ul_LastHeartbeat = ul_CurMillis;                 // update the heartbeat toggle time for the next cycle
    b_Heartbeat = !b_Heartbeat;                      // toggle state of LED
    digitalWrite(ci_HeartbeatLED, b_Heartbeat);      // update LED
  }
}

// Converts servo position in degrees into the required duty cycle for an RC servo motor control signal 
// assuming 16-bit resolution (i.e., value represented as fraction of 65535). 
// Note that the constants for minimum and maximum duty cycle may need to be adjusted for a specific motor
long degreesToDutyCycle(int deg) {
  const long cl_MinDutyCycle = 1650;                 // duty cycle for 0 degrees
  const long cl_MaxDutyCycle = 8175;                 // duty cycle for 180 degrees

  long l_DutyCycle = map(deg, 0, 180, cl_MinDutyCycle, cl_MaxDutyCycle);  // convert to duty cycle
  return l_DutyCycle;
}
